machine[1]
machine$protein[1]
netmhc
netmhc[netmhc$affinity <= limit,]
# remember to set working directory
setwd("/Users/christian/Documents/OneDrive/Fagprojekt/fagprojekt-kode")
machine = read.csv("data/machine.csv",header = TRUE, sep=";")
netmhc = read.csv("data/netmhc.csv",header = TRUE, sep=";")
smmpmbec = read.csv("data/smmpmbec.csv",header = TRUE, sep=";")
syfpeithi = read.csv("data/syfpeithi.csv",header = TRUE, sep=";")
machine = machine[order(machine$position),]
netmhc = netmhc[order(netmhc$position),]
smmpmbec = smmpmbec[order(smmpmbec$position),]
syfpeithi = syfpeithi[order(syfpeithi$position),]
methodNames = c("Machine", "NetMHC", "SMMPMBEC", "SYFPEITHI")
numOfMethods = length(methodNames)
protNames = c("gag", "pol", "vif", "vpr", "tat", "rev", "vpu", "env", "nef")
numOfProt = length(protNames)
protLengths = rep(0, numOfProt)
for(i in 1:numOfProt) {
protLengths[i] = sum(netmhc$protein == protNames[i]) + 8
}
# remove everything that isn't epitopes
limit = 500
netmhc = netmhc[netmhc$affinity <= limit,]
smmpmbec = smmpmbec[smmpmbec$affinity <= limit,]
# total number of epitopes
totalMachine = dim(machine)[1]
totalMachine
totalNetmhc = dim(netmhc)[1]
totalNetmhc
totalSmmpmbec = dim(smmpmbec)[1]
totalSmmpmbec
avgEpitopes = mean(totalNetmhc, totalSmmpmbec)
scoreLimit = sort(syfpeithi$score, decreasing = FALSE)[avgEpitopes]
syfpeithi = syfpeithi[syfpeithi$score <= scoreLimit,]
totalSyfpeithi = dim(syfpeithi)[1]
totalSyfpeithi
# bar plot of counts of predictions
sumMachine = rep(0, numOfProt)
sumNetmhc = rep(0, numOfProt)
sumSmmpmbec = rep(0, numOfProt)
sumSyfpeithi = rep(0, numOfProt)
for(prot in 1:numOfProt) {
sumMachine[prot] = sum(machine$protein == protNames[prot])
sumNetmhc[prot] = sum(netmhc$protein == protNames[prot])
sumSmmpmbec[prot] = sum(smmpmbec$protein == protNames[prot])
sumSyfpeithi[prot] = sum(syfpeithi$protein == protNames[prot])
}
# collect data in data frame for plotting
methods = c(rep(methodNames[1], numOfProt),
rep(methodNames[2], numOfProt),
rep(methodNames[3], numOfProt),
rep(methodNames[4], numOfProt))
proteins = ordered(rep(protNames, numOfMethods), levels = protNames)
epitopes = c(sumMachine, sumNetmhc, sumSmmpmbec, sumSyfpeithi)
all = data.frame(methods, proteins, epitopes)
# plot prediction count
library(lattice)
barchart(epitopes~proteins, data = all, groups = methods,
origin = 0, auto.key = list(corner = c(0.5, 0.95)))
# find prediction position on x axis of upcoming plot
xMachine = rep(0, totalMachine)
xNetmhc = rep(0, totalNetmhc)
xSmmpmbec = rep(0, totalSmmpmbec)
xSyfpeithi = rep(0, totalSyfpeithi)
ticks = c(0, cumsum(protLengths))
for(i in 1:numOfProt) {
index = machine$protein == protNames[i]
xMachine[index] = machine$position[index] + ticks[i]
index = netmhc$protein == protNames[i]
xNetmhc[index] = netmhc$position[index] + ticks[i]
index = smmpmbec$protein == protNames[i]
xSmmpmbec[index] = smmpmbec$position[index] + ticks[i]
index = syfpeithi$protein == protNames[i]
xSyfpeithi[index] = syfpeithi$position[index] + ticks[i]
}
xlimit = c(0, ticks[numOfProt+1])
ylimit = c(0.05,1.05)
plot(NULL, ylab = '', xlab = "Position", xlim = xlimit, ylim = ylimit, type = 'p', yaxt = 'n', xaxt = 'n')
# grid
for(i in 1:length(ticks)) {
lines(rep(ticks[i],2), c(-10,10), col = "gray")
}
colors = c('#408080', '#804080', '#40804f', '#806140')
points(xMachine, rep(0.4,length(xMachine)), pch = '|', col = colors[1])
points(xNetmhc, rep(0.3,length(xNetmhc)), pch = '|', col = colors[2])
points(xSmmpmbec, rep(0.2,length(xSmmpmbec)), pch = '|', col = colors[3])
points(xSyfpeithi, rep(0.1,length(xSyfpeithi)), pch = '|', col = colors[4])
axis(1, at = ticks, labels = FALSE)
text(ticks, par("usr")[3]-0.1, labels = c(protNames, ''), srt = 90, pos = 1, xpd = TRUE)
legend("top", methodNames, lty = 1, lwd = 10, col = colors, y.intersp = 2)
compare1 = rep(0, max(length(xMachine), length(xNetmhc)))
compare2 = compare1
compare1[1:length(xMachine)] = xMachine
compare2[1:length(xNetmhc)] = xNetmhc
intersect1 = length(intersect(compare1, compare2))
compare1 = rep(0, max(length(xMachine), length(xSyfpeithi)))
compare2 = compare1
compare1[1:length(xMachine)] = xMachine
compare2[1:length(xSyfpeithi)] = xSyfpeithi
intersect2 = length(intersect(compare1, compare2))
compare1 = rep(0, max(length(xNetmhc), length(xSyfpeithi)))
compare2 = compare1
compare1[1:length(xNetmhc)] = xNetmhc
compare2[1:length(xSyfpeithi)] = xSyfpeithi
intersect3 = length(intersect(compare1, compare2))
require(venneuler)
v = venneuler(c(Machine=totalMachine, NetMHC=totalNetmhc, SYFPEITHI=totalSyfpeithi,
"Machine&NetMHC"=intersect1, "Machine&SYFPEITHI"=intersect2, "NetMHC&SYFPEITHI"=intersect3))
plot(v)
setwd("/Users/christian/Documents/OneDrive/Fagprojekt/fagprojekt-kode")
machine = read.csv("data/machine.csv",header = TRUE, sep=";")
netmhc = read.csv("data/netmhc.csv",header = TRUE, sep=";")
smmpmbec = read.csv("data/smmpmbec.csv",header = TRUE, sep=";")
syfpeithi = read.csv("data/syfpeithi.csv",header = TRUE, sep=";")
machine = machine[order(machine$position),]
netmhc = netmhc[order(netmhc$position),]
smmpmbec = smmpmbec[order(smmpmbec$position),]
syfpeithi = syfpeithi[order(syfpeithi$position),]
methodNames = c("Machine", "NetMHC", "SMMPMBEC", "SYFPEITHI")
numOfMethods = length(methodNames)
protNames = c("gag", "pol", "vif", "vpr", "tat", "rev", "vpu", "env", "nef")
numOfProt = length(protNames)
protLengths = rep(0, numOfProt)
for(i in 1:numOfProt) {
protLengths[i] = sum(netmhc$protein == protNames[i]) + 8
}
# remove everything that isn't epitopes
limit = 500
netmhc = netmhc[netmhc$affinity <= limit,]
smmpmbec = smmpmbec[smmpmbec$affinity <= limit,]
# total number of epitopes
totalMachine = dim(machine)[1]
totalMachine
totalNetmhc = dim(netmhc)[1]
totalNetmhc
totalSmmpmbec = dim(smmpmbec)[1]
totalSmmpmbec
avgEpitopes = mean(totalNetmhc, totalSmmpmbec)
scoreLimit = sort(syfpeithi$score, decreasing = FALSE)[avgEpitopes]
syfpeithi = syfpeithi[syfpeithi$score <= scoreLimit,]
totalSyfpeithi = dim(syfpeithi)[1]
totalSyfpeithi
# bar plot of counts of predictions
sumMachine = rep(0, numOfProt)
sumNetmhc = rep(0, numOfProt)
sumSmmpmbec = rep(0, numOfProt)
sumSyfpeithi = rep(0, numOfProt)
for(prot in 1:numOfProt) {
sumMachine[prot] = sum(machine$protein == protNames[prot])
sumNetmhc[prot] = sum(netmhc$protein == protNames[prot])
sumSmmpmbec[prot] = sum(smmpmbec$protein == protNames[prot])
sumSyfpeithi[prot] = sum(syfpeithi$protein == protNames[prot])
}
# collect data in data frame for plotting
methods = c(rep(methodNames[1], numOfProt),
rep(methodNames[2], numOfProt),
rep(methodNames[3], numOfProt),
rep(methodNames[4], numOfProt))
proteins = ordered(rep(protNames, numOfMethods), levels = protNames)
epitopes = c(sumMachine, sumNetmhc, sumSmmpmbec, sumSyfpeithi)
all = data.frame(methods, proteins, epitopes)
# plot prediction count
require(lattice)
barchart(epitopes~proteins, data = all, groups = methods,
origin = 0, auto.key = list(corner = c(0.5, 0.95)))
netmhc$protein
syfpeithi$protein
syfpeithi$position
syfpeithi$position[2]
test = 4
test
test +=4
xMachine = machine$position
xNetmhc = netmhc$position
xSmmpmbec = smmpmbec$position
xSyfpeithi = syfpeithi$position
xMachine
xNetmhc
xSmmpmbec
xSyfpeithi
ticks = c(0, cumsum(protLengths))
ticks
i
i=1
index = machine$protein == protNames[i]
index
protNames[i]
machine$protein
machine
machine$protein
machine$protein == protNames[i]
xMachine
ticks[i]
i=2
index = machine$protein == protNames[i]
machine$protein
protNames[i]
index
machine
xMachine
ticks
ticks[i]
protein
syfpeithi$protein
xMachine[index]
setwd("/Users/christian/Documents/OneDrive/Fagprojekt/fagprojekt-kode")
machine = read.csv("data/machine.csv",header = TRUE, sep=";")
netmhc = read.csv("data/netmhc.csv",header = TRUE, sep=";")
smmpmbec = read.csv("data/smmpmbec.csv",header = TRUE, sep=";")
syfpeithi = read.csv("data/syfpeithi.csv",header = TRUE, sep=";")
machine = machine[order(machine$position),]
netmhc = netmhc[order(netmhc$position),]
smmpmbec = smmpmbec[order(smmpmbec$position),]
syfpeithi = syfpeithi[order(syfpeithi$position),]
methodNames = c("Machine", "NetMHC", "SMMPMBEC", "SYFPEITHI")
numOfMethods = length(methodNames)
protNames = c("gag", "pol", "vif", "vpr", "tat", "rev", "vpu", "env", "nef")
numOfProt = length(protNames)
protLengths = rep(0, numOfProt)
for(i in 1:numOfProt) {
protLengths[i] = sum(netmhc$protein == protNames[i]) + 8
}
# remove everything that isn't epitopes
limit = 500
netmhc = netmhc[netmhc$affinity <= limit,]
smmpmbec = smmpmbec[smmpmbec$affinity <= limit,]
# total number of epitopes
totalMachine = dim(machine)[1]
totalMachine
totalNetmhc = dim(netmhc)[1]
totalNetmhc
totalSmmpmbec = dim(smmpmbec)[1]
totalSmmpmbec
avgEpitopes = mean(totalNetmhc, totalSmmpmbec)
scoreLimit = sort(syfpeithi$score, decreasing = FALSE)[avgEpitopes]
syfpeithi = syfpeithi[syfpeithi$score <= scoreLimit,]
totalSyfpeithi = dim(syfpeithi)[1]
totalSyfpeithi
# bar plot of counts of predictions
sumMachine = rep(0, numOfProt)
sumNetmhc = rep(0, numOfProt)
sumSmmpmbec = rep(0, numOfProt)
sumSyfpeithi = rep(0, numOfProt)
for(prot in 1:numOfProt) {
sumMachine[prot] = sum(machine$protein == protNames[prot])
sumNetmhc[prot] = sum(netmhc$protein == protNames[prot])
sumSmmpmbec[prot] = sum(smmpmbec$protein == protNames[prot])
sumSyfpeithi[prot] = sum(syfpeithi$protein == protNames[prot])
}
# collect data in data frame for plotting
methods = c(rep(methodNames[1], numOfProt),
rep(methodNames[2], numOfProt),
rep(methodNames[3], numOfProt),
rep(methodNames[4], numOfProt))
proteins = ordered(rep(protNames, numOfMethods), levels = protNames)
epitopes = c(sumMachine, sumNetmhc, sumSmmpmbec, sumSyfpeithi)
all = data.frame(methods, proteins, epitopes)
# plot prediction count
require(lattice)
barchart(epitopes~proteins, data = all, groups = methods,
origin = 0, auto.key = list(corner = c(0.5, 0.95)))
xMachine = machine$position
xNetmhc = netmhc$position
xSmmpmbec = smmpmbec$position
xSyfpeithi = syfpeithi$position
compare1 = rep(0, max(length(xMachine), length(xNetmhc)))
compare2 = compare1
compare1[1:length(xMachine)] = xMachine
compare2[1:length(xNetmhc)] = xNetmhc
intersect1 = length(intersect(compare1, compare2))
compare1 = rep(0, max(length(xMachine), length(xSyfpeithi)))
compare2 = compare1
compare1[1:length(xMachine)] = xMachine
compare2[1:length(xSyfpeithi)] = xSyfpeithi
intersect2 = length(intersect(compare1, compare2))
compare1 = rep(0, max(length(xNetmhc), length(xSyfpeithi)))
compare2 = compare1
compare1[1:length(xNetmhc)] = xNetmhc
compare2[1:length(xSyfpeithi)] = xSyfpeithi
intersect3 = length(intersect(compare1, compare2))
require(venneuler)
v = venneuler(c(Machine=totalMachine, NetMHC=totalNetmhc, SYFPEITHI=totalSyfpeithi,
"Machine&NetMHC"=intersect1, "Machine&SYFPEITHI"=intersect2, "NetMHC&SYFPEITHI"=intersect3))
plot(v)
xlimit = c(0, ticks[numOfProt+1])
ylimit = c(0.05,1.05)
plot(NULL, ylab = '', xlab = "Position", xlim = xlimit, ylim = ylimit, type = 'p', yaxt = 'n', xaxt = 'n')
# grid
for(i in 1:length(ticks)) {
lines(rep(ticks[i],2), c(-10,10), col = "gray")
}
colors = c('#408080', '#804080', '#40804f', '#806140')
points(xMachine, rep(0.4,length(xMachine)), pch = '|', col = colors[1])
points(xNetmhc, rep(0.3,length(xNetmhc)), pch = '|', col = colors[2])
points(xSmmpmbec, rep(0.2,length(xSmmpmbec)), pch = '|', col = colors[3])
points(xSyfpeithi, rep(0.1,length(xSyfpeithi)), pch = '|', col = colors[4])
axis(1, at = ticks, labels = FALSE)
text(ticks, par("usr")[3]-0.1, labels = c(protNames, ''), srt = 90, pos = 1, xpd = TRUE)
legend("top", methodNames, lty = 1, lwd = 10, col = colors, y.intersp = 2)
ticks = c(0, cumsum(protLengths))
xlimit = c(0, ticks[numOfProt+1])
ylimit = c(0.05,1.05)
plot(NULL, ylab = '', xlab = "Position", xlim = xlimit, ylim = ylimit, type = 'p', yaxt = 'n', xaxt = 'n')
# grid
for(i in 1:length(ticks)) {
lines(rep(ticks[i],2), c(-10,10), col = "gray")
}
colors = c('#408080', '#804080', '#40804f', '#806140')
points(xMachine, rep(0.4,length(xMachine)), pch = '|', col = colors[1])
points(xNetmhc, rep(0.3,length(xNetmhc)), pch = '|', col = colors[2])
points(xSmmpmbec, rep(0.2,length(xSmmpmbec)), pch = '|', col = colors[3])
points(xSyfpeithi, rep(0.1,length(xSyfpeithi)), pch = '|', col = colors[4])
axis(1, at = ticks, labels = FALSE)
text(ticks, par("usr")[3]-0.1, labels = c(protNames, ''), srt = 90, pos = 1, xpd = TRUE)
legend("top", methodNames, lty = 1, lwd = 10, col = colors, y.intersp = 2)
for(i in 2:numOfProt) {
index = machine$protein == protNames[i]
xMachine[index] = xMachine[index] + ticks[i]
index = netmhc$protein == protNames[i]
xNetmhc[index] = xNetmhc[index] + ticks[i]
index = smmpmbec$protein == protNames[i]
xSmmpmbec[index] = xSmmpmbec[index] + ticks[i]
index = syfpeithi$protein == protNames[i]
xSyfpeithi[index] = xSyfpeithi[index] + ticks[i]
}
xlimit = c(0, ticks[numOfProt+1])
ylimit = c(0.05,1.05)
plot(NULL, ylab = '', xlab = "Position", xlim = xlimit, ylim = ylimit, type = 'p', yaxt = 'n', xaxt = 'n')
# grid
for(i in 1:length(ticks)) {
lines(rep(ticks[i],2), c(-10,10), col = "gray")
}
colors = c('#408080', '#804080', '#40804f', '#806140')
points(xMachine, rep(0.4,length(xMachine)), pch = '|', col = colors[1])
points(xNetmhc, rep(0.3,length(xNetmhc)), pch = '|', col = colors[2])
points(xSmmpmbec, rep(0.2,length(xSmmpmbec)), pch = '|', col = colors[3])
points(xSyfpeithi, rep(0.1,length(xSyfpeithi)), pch = '|', col = colors[4])
axis(1, at = ticks, labels = FALSE)
text(ticks, par("usr")[3]-0.1, labels = c(protNames, ''), srt = 90, pos = 1, xpd = TRUE)
legend("top", methodNames, lty = 1, lwd = 10, col = colors, y.intersp = 2)
compare1 = rep(0, max(length(xMachine), length(xNetmhc)))
compare2 = compare1
compare1[1:length(xMachine)] = xMachine
compare2[1:length(xNetmhc)] = xNetmhc
intersect1 = length(intersect(compare1, compare2))
compare1 = rep(0, max(length(xMachine), length(xSyfpeithi)))
compare2 = compare1
compare1[1:length(xMachine)] = xMachine
compare2[1:length(xSyfpeithi)] = xSyfpeithi
intersect2 = length(intersect(compare1, compare2))
compare1 = rep(0, max(length(xNetmhc), length(xSyfpeithi)))
compare2 = compare1
compare1[1:length(xNetmhc)] = xNetmhc
compare2[1:length(xSyfpeithi)] = xSyfpeithi
intersect3 = length(intersect(compare1, compare2))
require(venneuler)
v = venneuler(c(Machine=totalMachine, NetMHC=totalNetmhc, SYFPEITHI=totalSyfpeithi,
"Machine&NetMHC"=intersect1, "Machine&SYFPEITHI"=intersect2, "NetMHC&SYFPEITHI"=intersect3))
plot(v)
machine = read.csv("data/machine.csv",header = TRUE, sep=";")
netmhc = read.csv("data/netmhc.csv",header = TRUE, sep=";")
smmpmbec = read.csv("data/smmpmbec.csv",header = TRUE, sep=";")
syfpeithi = read.csv("data/syfpeithi.csv",header = TRUE, sep=";")
machine = read.csv("data/machine.csv",header = TRUE, sep=";")
netmhc = read.csv("data/netmhc.csv",header = TRUE, sep=";")
smmpmbec = read.csv("data/smmpmbec.csv",header = TRUE, sep=";")
syfpeithi = read.csv("data/syfpeithi.csv",header = TRUE, sep=";")
methodNames = c("Machine", "NetMHC", "SMMPMBEC", "SYFPEITHI")
numOfMethods = length(methodNames)
protNames = c("gag", "pol", "vif", "vpr", "tat", "rev", "vpu", "env", "nef")
numOfProt = length(protNames)
protLengths = rep(0, numOfProt)
for(i in 1:numOfProt) {
protLengths[i] = sum(netmhc$protein == protNames[i]) + 8
}
limit = 500
netmhc = netmhc[netmhc$affinity <= limit,]
smmpmbec = smmpmbec[smmpmbec$affinity <= limit,]
totalMachine = dim(machine)[1]
totalMachine
totalNetmhc = dim(netmhc)[1]
totalNetmhc
totalSmmpmbec = dim(smmpmbec)[1]
totalSmmpmbec
avgEpitopes = mean(totalNetmhc, totalSmmpmbec)
avgEpitopes
sort(syfpeithi$score, decreasing = FALSE)
sort(syfpeithi$score, decreasing = TRUE)
sort(syfpeithi$score, decreasing = TRUE)[avgEpitopes]
syfpeithi = syfpeithi[syfpeithi$score > scoreLimit,]
scoreLimit = sort(syfpeithi$score, decreasing = TRUE)[avgEpitopes]
syfpeithi = syfpeithi[syfpeithi$score > scoreLimit,]
totalSyfpeithi = dim(syfpeithi)[1]
totalSyfpeithi
setwd("/Users/christian/Documents/OneDrive/Fagprojekt/fagprojekt-kode")
machine = read.csv("data/machine.csv",header = TRUE, sep=";")
netmhc = read.csv("data/netmhc.csv",header = TRUE, sep=";")
smmpmbec = read.csv("data/smmpmbec.csv",header = TRUE, sep=";")
syfpeithi = read.csv("data/syfpeithi.csv",header = TRUE, sep=";")
methodNames = c("Machine", "NetMHC", "SMMPMBEC", "SYFPEITHI")
numOfMethods = length(methodNames)
protNames = c("gag", "pol", "vif", "vpr", "tat", "rev", "vpu", "env", "nef")
numOfProt = length(protNames)
protLengths = rep(0, numOfProt)
for(i in 1:numOfProt) {
protLengths[i] = sum(netmhc$protein == protNames[i]) + 8
}
# remove everything that isn't epitopes
limit = 500
netmhc = netmhc[netmhc$affinity <= limit,]
smmpmbec = smmpmbec[smmpmbec$affinity <= limit,]
# total number of epitopes
totalMachine = dim(machine)[1]
totalMachine
totalNetmhc = dim(netmhc)[1]
totalNetmhc
totalSmmpmbec = dim(smmpmbec)[1]
totalSmmpmbec
avgEpitopes = mean(totalNetmhc, totalSmmpmbec)
scoreLimit = sort(syfpeithi$score, decreasing = TRUE)[avgEpitopes]
syfpeithi = syfpeithi[syfpeithi$score >= scoreLimit,]
totalSyfpeithi = dim(syfpeithi)[1]
totalSyfpeithi
# bar plot of counts of predictions
sumMachine = rep(0, numOfProt)
sumNetmhc = rep(0, numOfProt)
sumSmmpmbec = rep(0, numOfProt)
sumSyfpeithi = rep(0, numOfProt)
for(prot in 1:numOfProt) {
sumMachine[prot] = sum(machine$protein == protNames[prot])
sumNetmhc[prot] = sum(netmhc$protein == protNames[prot])
sumSmmpmbec[prot] = sum(smmpmbec$protein == protNames[prot])
sumSyfpeithi[prot] = sum(syfpeithi$protein == protNames[prot])
}
# collect data in data frame for plotting
methods = c(rep(methodNames[1], numOfProt),
rep(methodNames[2], numOfProt),
rep(methodNames[3], numOfProt),
rep(methodNames[4], numOfProt))
proteins = ordered(rep(protNames, numOfMethods), levels = protNames)
epitopes = c(sumMachine, sumNetmhc, sumSmmpmbec, sumSyfpeithi)
all = data.frame(methods, proteins, epitopes)
# plot prediction count
require(lattice)
barchart(epitopes~proteins, data = all, groups = methods,
origin = 0, auto.key = list(corner = c(0.5, 0.95)))
# find prediction position on x axis of upcoming plot
xMachine = machine$position
xNetmhc = netmhc$position
xSmmpmbec = smmpmbec$position
xSyfpeithi = syfpeithi$position
ticks = c(0, cumsum(protLengths))
# start from 2 since zero is added when dealing with gag
for(i in 2:numOfProt) {
index = machine$protein == protNames[i]
xMachine[index] = xMachine[index] + ticks[i]
index = netmhc$protein == protNames[i]
xNetmhc[index] = xNetmhc[index] + ticks[i]
index = smmpmbec$protein == protNames[i]
xSmmpmbec[index] = xSmmpmbec[index] + ticks[i]
index = syfpeithi$protein == protNames[i]
xSyfpeithi[index] = xSyfpeithi[index] + ticks[i]
}
xlimit = c(0, ticks[numOfProt+1])
ylimit = c(0.05,1.05)
plot(NULL, ylab = '', xlab = "Position", xlim = xlimit, ylim = ylimit, type = 'p', yaxt = 'n', xaxt = 'n')
# grid
for(i in 1:length(ticks)) {
lines(rep(ticks[i],2), c(-10,10), col = "gray")
}
colors = c('#408080', '#804080', '#40804f', '#806140')
points(xMachine, rep(0.4,length(xMachine)), pch = '|', col = colors[1])
points(xNetmhc, rep(0.3,length(xNetmhc)), pch = '|', col = colors[2])
points(xSmmpmbec, rep(0.2,length(xSmmpmbec)), pch = '|', col = colors[3])
points(xSyfpeithi, rep(0.1,length(xSyfpeithi)), pch = '|', col = colors[4])
axis(1, at = ticks, labels = FALSE)
text(ticks, par("usr")[3]-0.1, labels = c(protNames, ''), srt = 90, pos = 1, xpd = TRUE)
legend("top", methodNames, lty = 1, lwd = 10, col = colors, y.intersp = 2)
compare1 = rep(0, max(length(xMachine), length(xNetmhc)))
compare2 = compare1
compare1[1:length(xMachine)] = xMachine
compare2[1:length(xNetmhc)] = xNetmhc
intersect1 = length(intersect(compare1, compare2))
compare1 = rep(0, max(length(xMachine), length(xSyfpeithi)))
compare2 = compare1
compare1[1:length(xMachine)] = xMachine
compare2[1:length(xSyfpeithi)] = xSyfpeithi
intersect2 = length(intersect(compare1, compare2))
compare1 = rep(0, max(length(xNetmhc), length(xSyfpeithi)))
compare2 = compare1
compare1[1:length(xNetmhc)] = xNetmhc
compare2[1:length(xSyfpeithi)] = xSyfpeithi
intersect3 = length(intersect(compare1, compare2))
require(venneuler)
venn = venneuler(c(Machine=totalMachine, NetMHC=totalNetmhc, SYFPEITHI=totalSyfpeithi,
"Machine&NetMHC"=intersect1,
"Machine&SYFPEITHI"=intersect2,
"NetMHC&SYFPEITHI"=intersect3))
plot(venn)
intersect1 = length(intersect(xMachine, xNetmhc))
intersect1 = length(intersect(xMachine, xNetmhc))
intersect2 = length(intersect(xMachine, xSyfpeithi))
intersect3 = length(intersect(xNetmhc, xSyfpeithi))
intersect4 = length(intersect(intersect(xMachine, xNetmhc), xSyfpeithi))
venn = venneuler(c(Machine=totalMachine, NetMHC=totalNetmhc, SYFPEITHI=totalSyfpeithi,
"Machine&NetMHC" = intersect1,
"Machine&SYFPEITHI" = intersect2,
"NetMHC&SYFPEITHI" = intersect3,
"Machine&NetMHC&SYFPEITHI" = intersect4))
plot(venn)
